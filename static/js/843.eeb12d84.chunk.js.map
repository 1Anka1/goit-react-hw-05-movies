{"version":3,"file":"static/js/843.eeb12d84.chunk.js","mappings":"gMACA,EAAmD,qBAAnD,EAAiF,uBAAjF,EAAiH,uBCkBtGA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,ECJpB,EAbc,CACZ,CACED,GAAIN,IACJU,GAAI,IACJC,KAAM,QAER,CACEL,GAAIN,IACJU,GAAI,UACJC,KAAM,W,SCPJC,EAAe,SAAC,GACpB,OADqC,EAAfC,SACP,UAAMC,EAAN,YAAkBA,GAAlB,UAAoCA,EACpD,EAEYC,EAAS,WACpB,OACE,gBAAKC,UAAWF,EAAhB,UACE,yBACGG,EAAAA,KAAU,gBAAGX,EAAH,EAAGA,GAAII,EAAP,EAAOA,GAAIC,EAAX,EAAWA,KAAX,OACT,SAAC,KAAD,CAAkBK,UAAWJ,EAAcF,GAAIA,EAAIQ,KAAG,EAAtD,SACGP,GADWL,EADL,OAQlB,E,kBChBc,SAASa,IACtB,OAAO,iCACP,SAACJ,EAAD,KACA,SAAC,EAAAK,SAAD,CAAUC,UAAU,6CAApB,UACM,SAAC,KAAD,QAGP,C","sources":["webpack://react-homework-template/./src/components/AppBar/AppBar.module.scss?4408","../node_modules/nanoid/index.browser.js","components/AppBar/items.js","components/AppBar/AppBar.jsx","components/SharedLayout/SharedLayout.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"AppBar_menu__gTFYF\",\"link\":\"AppBar_link__OWuA7\",\"active\":\"AppBar_active__oH-Z7\",\"appBar\":\"AppBar_appBar__3eRvl\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nconst items = [\n  {\n    id: nanoid(),\n    to: '/',\n    text: 'Home',\n  },\n  {\n    id: nanoid(),\n    to: '/movies',\n    text: 'Movies',\n  },\n];\n\nexport default items;\n","import { NavLink } from 'react-router-dom';\nimport css from './AppBar.module.scss';\nimport items from './items';\n\nconst getClassName = ({ isActive }) => {\n  return isActive ? `${css.link} ${css.active}` : `${css.link}`;\n};\n\nexport const AppBar = () => {\n  return (\n    <div className={css.appBar}>\n      <nav>\n        {items.map(({ id, to, text }) => (\n          <NavLink key={id} className={getClassName} to={to} end>\n            {text}\n          </NavLink>\n        ))}\n      </nav>\n    </div>\n  );\n};\n","import {AppBar} from 'components/AppBar/AppBar';\nimport { Outlet } from 'react-router-dom';\nimport { Suspense } from 'react'\n\nexport default function SharedLayout() {\n  return <>\n  <AppBar />\n  <Suspense fallback={<div>Loading page...</div>}>\n        <Outlet />\n      </Suspense>\n  </>;\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","to","text","getClassName","isActive","css","AppBar","className","items","end","SharedLayout","Suspense","fallback"],"sourceRoot":""}